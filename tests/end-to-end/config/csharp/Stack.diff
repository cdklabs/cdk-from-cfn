diff --git a/./tests/end-to-end/config/template.json b/tests/end-to-end/config-csharp-working-dir/cdk.out/Stack.template.json
index 5b1df92..17fec34 100644
--- a/./tests/end-to-end/config/template.json
+++ b/tests/end-to-end/config-csharp-working-dir/cdk.out/Stack.template.json
@@ -1,28 +1,15 @@
 {
- "AWSTemplateFormatVersion": "2010-09-09",
- "Description": "AWS CloudFormation Sample Template Config: This template demonstrates the usage of AWS Config resources.  **WARNING** You will be billed for the AWS resources used if you create a stack from this template.",
- "Parameters": {
-  "Ec2VolumeAutoEnableIO": {
-   "Type": "String",
-   "Default": "false",
-   "AllowedValues": [
-    "false",
-    "true"
-   ]
+ "Resources": {
+  "ConfigBucket": {
+   "Type": "AWS::S3::Bucket"
   },
-  "Ec2VolumeTagKey": {
-   "Type": "String",
-   "Default": "CostCenter"
-  }
+  "ConfigTopic": {
+   "Type": "AWS::SNS::Topic"
   },
- "Resources": {
   "Ec2Volume": {
    "Type": "AWS::EC2::Volume",
    "Properties": {
-    "AutoEnableIO": {
-     "Ref": "Ec2VolumeAutoEnableIO"
-    },
-    "Size": "5",
+    "AutoEnableIO": false,
     "AvailabilityZone": {
      "Fn::Select": [
       0,
@@ -31,196 +18,15 @@
       }
      ]
     },
+    "Size": 5,
     "Tags": [
      {
-      "Key": {
-       "Ref": "Ec2VolumeTagKey"
-      },
+      "Key": "CostCenter",
       "Value": "Ec2VolumeTagValue"
      }
     ]
    }
   },
-  "ConfigRecorder": {
-   "Type": "AWS::Config::ConfigurationRecorder",
-   "Properties": {
-    "Name": "default",
-    "RecordingGroup": {
-     "ResourceTypes": [
-      "AWS::EC2::Volume"
-     ]
-    },
-    "RoleARN": {
-     "Fn::GetAtt": [
-      "ConfigRole",
-      "Arn"
-     ]
-    }
-   }
-  },
-  "DeliveryChannel": {
-   "Type": "AWS::Config::DeliveryChannel",
-   "Properties": {
-    "ConfigSnapshotDeliveryProperties": {
-     "DeliveryFrequency": "Six_Hours"
-    },
-    "S3BucketName": {
-     "Ref": "ConfigBucket"
-    },
-    "SnsTopicARN": {
-     "Ref": "ConfigTopic"
-    }
-   }
-  },
-  "ConfigBucket": {
-   "Type": "AWS::S3::Bucket"
-  },
-  "ConfigTopic": {
-   "Type": "AWS::SNS::Topic"
-  },
-  "ConfigTopicPolicy": {
-   "Type": "AWS::SNS::TopicPolicy",
-   "Properties": {
-    "PolicyDocument": {
-     "Id": "ConfigTopicPolicy",
-     "Version": "2012-10-17",
-     "Statement": [
-      {
-       "Effect": "Allow",
-       "Principal": {
-        "Service": "config.amazonaws.com"
-       },
-       "Action": "SNS:Publish",
-       "Resource": "*"
-      }
-     ]
-    },
-    "Topics": [
-     {
-      "Ref": "ConfigTopic"
-     }
-    ]
-   }
-  },
-  "ConfigRuleForVolumeTags": {
-   "Type": "AWS::Config::ConfigRule",
-   "Properties": {
-    "InputParameters": {
-     "tag1Key": "CostCenter"
-    },
-    "Scope": {
-     "ComplianceResourceTypes": [
-      "AWS::EC2::Volume"
-     ]
-    },
-    "Source": {
-     "Owner": "AWS",
-     "SourceIdentifier": "REQUIRED_TAGS"
-    }
-   },
-   "DependsOn": "ConfigRecorder"
-  },
-  "ConfigRuleForVolumeAutoEnableIO": {
-   "Type": "AWS::Config::ConfigRule",
-   "Properties": {
-    "ConfigRuleName": "ConfigRuleForVolumeAutoEnableIO",
-    "Scope": {
-     "ComplianceResourceId": {
-      "Ref": "Ec2Volume"
-     },
-     "ComplianceResourceTypes": [
-      "AWS::EC2::Volume"
-     ]
-    },
-    "Source": {
-     "Owner": "CUSTOM_LAMBDA",
-     "SourceDetails": [
-      {
-       "EventSource": "aws.config",
-       "MessageType": "ConfigurationItemChangeNotification"
-      }
-     ],
-     "SourceIdentifier": {
-      "Fn::GetAtt": [
-       "VolumeAutoEnableIOComplianceCheck",
-       "Arn"
-      ]
-     }
-    }
-   },
-   "DependsOn": [
-    "ConfigPermissionToCallLambda",
-    "ConfigRecorder"
-   ]
-  },
-  "ConfigPermissionToCallLambda": {
-   "Type": "AWS::Lambda::Permission",
-   "Properties": {
-    "FunctionName": {
-     "Fn::GetAtt": [
-      "VolumeAutoEnableIOComplianceCheck",
-      "Arn"
-     ]
-    },
-    "Action": "lambda:InvokeFunction",
-    "Principal": "config.amazonaws.com"
-   }
-  },
-  "VolumeAutoEnableIOComplianceCheck": {
-   "Type": "AWS::Lambda::Function",
-   "Properties": {
-    "Code": {
-     "ZipFile": {
-      "Fn::Join": [
-       "\n",
-       [
-        "var aws  = require('aws-sdk');",
-        "var config = new aws.ConfigService();",
-        "var ec2 = new aws.EC2();",
-        "exports.handler = function(event, context) {",
-        "    compliance = evaluateCompliance(event, function(compliance, event) {",
-        "        var configurationItem = JSON.parse(event.invokingEvent).configurationItem;",
-        "        var putEvaluationsRequest = {",
-        "            Evaluations: [{",
-        "                ComplianceResourceType: configurationItem.resourceType,",
-        "                ComplianceResourceId: configurationItem.resourceId,",
-        "                ComplianceType: compliance,",
-        "                OrderingTimestamp: configurationItem.configurationItemCaptureTime",
-        "            }],",
-        "            ResultToken: event.resultToken",
-        "        };",
-        "        config.putEvaluations(putEvaluationsRequest, function(err, data) {",
-        "            if (err) context.fail(err);",
-        "            else context.succeed(data);",
-        "        });",
-        "    });",
-        "};",
-        "function evaluateCompliance(event, doReturn) {",
-        "    var configurationItem = JSON.parse(event.invokingEvent).configurationItem;",
-        "    var status = configurationItem.configurationItemStatus;",
-        "    if (configurationItem.resourceType !== 'AWS::EC2::Volume' || event.eventLeftScope || (status !== 'OK' && status !== 'ResourceDiscovered'))",
-        "        doReturn('NOT_APPLICABLE', event);",
-        "    else ec2.describeVolumeAttribute({VolumeId: configurationItem.resourceId, Attribute: 'autoEnableIO'}, function(err, data) {",
-        "        if (err) context.fail(err);",
-        "        else if (data.AutoEnableIO.Value) doReturn('COMPLIANT', event);",
-        "        else doReturn('NON_COMPLIANT', event);",
-        "    });",
-        "}"
-       ]
-      ]
-     }
-    },
-    "Handler": "index.handler",
-    "Runtime": "nodejs18.x",
-    "Timeout": "30",
-    "Role": {
-     "Fn::GetAtt": [
-      "LambdaExecutionRole",
-      "Arn"
-     ]
-    }
-   }
-  },
   "LambdaExecutionRole": {
    "Type": "AWS::IAM::Role",
    "Properties": {
@@ -242,7 +48,6 @@
     },
     "Policies": [
      {
-      "PolicyName": "root",
       "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
@@ -256,7 +61,8 @@
          "Resource": "*"
         }
        ]
-      }
+      },
+      "PolicyName": "root"
      }
     ]
    }
@@ -285,7 +91,6 @@
     ],
     "Policies": [
      {
-      "PolicyName": "root",
       "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
@@ -335,36 +140,142 @@
          "Resource": "*"
         }
        ]
+      },
+      "PolicyName": "root"
      }
+    ]
+   }
+  },
+  "ConfigTopicPolicy": {
+   "Type": "AWS::SNS::TopicPolicy",
+   "Properties": {
+    "PolicyDocument": {
+     "Id": "ConfigTopicPolicy",
+     "Version": "2012-10-17",
+     "Statement": [
+      {
+       "Effect": "Allow",
+       "Principal": {
+        "Service": "config.amazonaws.com"
+       },
+       "Action": "SNS:Publish",
+       "Resource": "*"
+      }
+     ]
+    },
+    "Topics": [
+     {
+      "Ref": "ConfigTopic"
      }
     ]
    }
+  },
+  "DeliveryChannel": {
+   "Type": "AWS::Config::DeliveryChannel",
+   "Properties": {
+    "ConfigSnapshotDeliveryProperties": {
+     "DeliveryFrequency": "Six_Hours"
+    },
+    "S3BucketName": {
+     "Ref": "ConfigBucket"
+    },
+    "SnsTopicARN": {
+     "Ref": "ConfigTopic"
+    }
+   }
+  },
+  "VolumeAutoEnableIOComplianceCheck": {
+   "Type": "AWS::Lambda::Function",
+   "Properties": {
+    "Code": {
+     "ZipFile": "var aws  = require('aws-sdk');\nvar config = new aws.ConfigService();\nvar ec2 = new aws.EC2();\nexports.handler = function(event, context) {\n    compliance = evaluateCompliance(event, function(compliance, event) {\n        var configurationItem = JSON.parse(event.invokingEvent).configurationItem;\n        var putEvaluationsRequest = {\n            Evaluations: [{\n                ComplianceResourceType: configurationItem.resourceType,\n                ComplianceResourceId: configurationItem.resourceId,\n                ComplianceType: compliance,\n                OrderingTimestamp: configurationItem.configurationItemCaptureTime\n            }],\n            ResultToken: event.resultToken\n        };\n        config.putEvaluations(putEvaluationsRequest, function(err, data) {\n            if (err) context.fail(err);\n            else context.succeed(data);\n        });\n    });\n};\nfunction evaluateCompliance(event, doReturn) {\n    var configurationItem = JSON.parse(event.invokingEvent).configurationItem;\n    var status = configurationItem.configurationItemStatus;\n    if (configurationItem.resourceType !== 'AWS::EC2::Volume' || event.eventLeftScope || (status !== 'OK' && status !== 'ResourceDiscovered'))\n        doReturn('NOT_APPLICABLE', event);\n    else ec2.describeVolumeAttribute({VolumeId: configurationItem.resourceId, Attribute: 'autoEnableIO'}, function(err, data) {\n        if (err) context.fail(err);\n        else if (data.AutoEnableIO.Value) doReturn('COMPLIANT', event);\n        else doReturn('NON_COMPLIANT', event);\n    });\n}"
+    },
+    "Handler": "index.handler",
+    "Role": {
+     "Fn::GetAtt": [
+      "LambdaExecutionRole",
+      "Arn"
+     ]
+    },
+    "Runtime": "nodejs18.x",
+    "Timeout": 30
    }
   },
- "Outputs": {
-  "ConfigRuleForVolumeTagsArn": {
-   "Value": {
+  "ConfigPermissionToCallLambda": {
+   "Type": "AWS::Lambda::Permission",
+   "Properties": {
+    "Action": "lambda:InvokeFunction",
+    "FunctionName": {
      "Fn::GetAtt": [
-     "ConfigRuleForVolumeTags",
+      "VolumeAutoEnableIOComplianceCheck",
       "Arn"
      ]
+    },
+    "Principal": "config.amazonaws.com"
    }
   },
-  "ConfigRuleForVolumeTagsConfigRuleId": {
-   "Value": {
+  "ConfigRecorder": {
+   "Type": "AWS::Config::ConfigurationRecorder",
+   "Properties": {
+    "Name": "default",
+    "RecordingGroup": {
+     "ResourceTypes": [
+      "AWS::EC2::Volume"
+     ]
+    },
+    "RoleARN": {
      "Fn::GetAtt": [
-     "ConfigRuleForVolumeTags",
-     "ConfigRuleId"
+      "ConfigRole",
+      "Arn"
      ]
     }
+   }
   },
-  "ConfigRuleForVolumeAutoEnableIOComplianceType": {
-   "Value": {
+  "ConfigRuleForVolumeAutoEnableIO": {
+   "Type": "AWS::Config::ConfigRule",
+   "Properties": {
+    "ConfigRuleName": "ConfigRuleForVolumeAutoEnableIO",
+    "Scope": {
+     "ComplianceResourceId": {
+      "Ref": "Ec2Volume"
+     },
+     "ComplianceResourceTypes": [
+      "AWS::EC2::Volume"
+     ]
+    },
+    "Source": {
+     "Owner": "CUSTOM_LAMBDA",
+     "SourceDetails": [
+      {
+       "EventSource": "aws.config",
+       "MessageType": "ConfigurationItemChangeNotification"
+      }
+     ],
+     "SourceIdentifier": {
       "Fn::GetAtt": [
-     "ConfigRuleForVolumeAutoEnableIO",
-     "Compliance.Type"
+       "VolumeAutoEnableIOComplianceCheck",
+       "Arn"
       ]
      }
     }
    }
+  },
+  "ConfigRuleForVolumeTags": {
+   "Type": "AWS::Config::ConfigRule",
+   "Properties": {
+    "InputParameters": {
+     "tag1Key": "CostCenter"
+    },
+    "Scope": {
+     "ComplianceResourceTypes": [
+      "AWS::EC2::Volume"
+     ]
+    },
+    "Source": {
+     "Owner": "AWS",
+     "SourceIdentifier": "REQUIRED_TAGS"
+    }
+   }
+  }
+ }
 }
\ No newline at end of file
