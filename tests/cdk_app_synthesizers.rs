use std::borrow::Cow;

use cdk_from_cfn::code::{CodeBuffer, IndentOptions};

const INDENT: Cow<'static, str> = Cow::Borrowed("    ");

pub trait CdkAppCodeWriter {
    fn app_file(&self, code: &CodeBuffer, cdk_stack_classname: &str);
}

pub struct Typescript {}

impl CdkAppCodeWriter for Typescript {
    fn app_file(&self, code: &CodeBuffer, cdk_stack_classname: &str) {
        code.line("// auto-generated! a human should update this!");
        code.line("import * as cdk from \"aws-cdk-lib\";");
        code.line(format!(
            "import {{ {} }} from \"./stack\";",
            cdk_stack_classname
        ));
        let app = code.indent_with_options(IndentOptions {
            indent: INDENT,
            leading: Some("const app = new cdk.App({".into()),
            trailing: Some("});".into()),
            trailing_newline: true,
        });
        let app_props = app.indent_with_options(IndentOptions {
            indent: INDENT,
            leading: Some("defaultStackSynthesizer: new cdk.DefaultStackSynthesizer({".into()),
            trailing: Some("}),".into()),
            trailing_newline: true,
        });
        app_props.line("generateBootstrapVersionRule: false,");
        code.line(format!("new {}(app, \"Stack\");", cdk_stack_classname));
        code.line("app.synth();");
    }
}

pub struct Python {}

impl CdkAppCodeWriter for Python {
    fn app_file(&self, code: &CodeBuffer, cdk_stack_classname: &str) {
        code.line("# autogenerated");
        code.line("import aws_cdk as cdk");
        code.line("from stack import SimpleStack");
        let app = code.indent_with_options(IndentOptions {
            indent: INDENT,
            leading: Some("app = cdk.App(".into()),
            trailing: None,
            trailing_newline: true,
        });
        let app_props = app.indent_with_options(IndentOptions {
            indent: INDENT,
            leading: Some("default_stack_synthesizer=cdk.DefaultStackSynthesizer(".into()),
            trailing: None,
            trailing_newline: false,
        });
        app_props.line("generate_bootstrap_version_rule=False");
        app_props.line(")");
        app.line(")");
        code.line("SimpleStack(app, 'Stack')");
        code.line("app.synth()");
    }
}
